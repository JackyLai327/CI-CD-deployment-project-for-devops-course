name: Notes Application CI Pipeline
# create a CI pipeline based on the assignment specification
# remember to commit often

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:
      - main
      - feature/*

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm clean-install --prefix src
      - name: Run linter
        run: npm run test-lint --prefix src > reports/lint-reports.xml
      - if: success() || failure()
        name: Upload linting results
        uses: actions/upload-artifact@v3
        with:
          name: lint-results-${{ github.sha }}
          path: reports/lint-reports.xml

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm clean-install --prefix src
        continue-on-error: false
      - name: Run unit tests
        run: npm run test-unit --prefix src > reports/unit-test-reports.xml
      - if: success() || failure()
        name: Upload unit test results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ github.sha }}
          path: reports/unit-test-reports.xml
    
  failure-scenario: 
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm clean-install --prefix src
        continue-on-error: false
      - name: Run failure scenario
        run: npm run test-failure --prefix src > reports/failure-scenario-reports.xml
      - if: success() || failure()
        name: Upload failure scenario results
        uses: actions/upload-artifact@v3
        with:
          name: failure-scenario-results-${{ github.sha }}
          path: reports/failure-scenario-reports.xml

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm clean-install --prefix src
      - name: Start MongoDB container
        run: docker-compose -f docker-compose.yml up -d
      - name: Run integration tests
        run: npm run test-integration --prefix src > reports/integration-test-reports.xml
        continue-on-error: false
      - name: Stop MongoDB container
        run: docker-compose -f docker-compose.yml down
      - if: success() || failure()
        name: Upload integration test results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results-${{ github.sha }}
          path: reports/integration-test-reports.xml

  end-to-end-tests:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm clean-install --prefix src
      - name: Install playwright
        run: npx playwright install
      - name: Install browsers
        run: npx playwright install-deps
      - name: Start MongoDB container
        run: docker-compose -f docker-compose.yml up -d
      - name: Run end-to-end tests
        run: npm run test-e2e --prefix src > reports/end-to-end-test-reports.xml
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}
        continue-on-error: false
      - name: Stop MongoDB container
        run: docker-compose -f docker-compose.yml down
      - if: success() || failure()
        name: Upload end-to-end test results
        uses: actions/upload-artifact@v3
        with:
          name: end-to-end-test-results-${{ github.sha }}
          path: reports/end-to-end-test-reports.xml

  package-build:
    needs: end-to-end-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm clean-install --prefix src
      - if: github.ref == 'refs/heads/main' && (success() || failure())
        name: Create deployable artifact
        run: npm run pack --prefix src
      - if: github.ref == 'refs/heads/main' && (success() || failure())
        name: Upload deployable artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployable-artifact-${{ github.sha }}
          path: src/*.tgz